
1227_LED.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000182  000001f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000182  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000212  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000244  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c27  00000000  00000000  000002dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008b0  00000000  00000000  00000f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003bd  00000000  00000000  000017b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a4  00000000  00000000  00001b70  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000046d  00000000  00000000  00001c14  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003f8  00000000  00000000  00002081  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  00002479  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	58 c0       	rjmp	.+176    	; 0xb6 <__bad_interrupt>
   6:	00 00       	nop
   8:	56 c0       	rjmp	.+172    	; 0xb6 <__bad_interrupt>
   a:	00 00       	nop
   c:	54 c0       	rjmp	.+168    	; 0xb6 <__bad_interrupt>
   e:	00 00       	nop
  10:	52 c0       	rjmp	.+164    	; 0xb6 <__bad_interrupt>
  12:	00 00       	nop
  14:	50 c0       	rjmp	.+160    	; 0xb6 <__bad_interrupt>
  16:	00 00       	nop
  18:	4e c0       	rjmp	.+156    	; 0xb6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	4c c0       	rjmp	.+152    	; 0xb6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	4a c0       	rjmp	.+148    	; 0xb6 <__bad_interrupt>
  22:	00 00       	nop
  24:	48 c0       	rjmp	.+144    	; 0xb6 <__bad_interrupt>
  26:	00 00       	nop
  28:	46 c0       	rjmp	.+140    	; 0xb6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	44 c0       	rjmp	.+136    	; 0xb6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	42 c0       	rjmp	.+132    	; 0xb6 <__bad_interrupt>
  32:	00 00       	nop
  34:	40 c0       	rjmp	.+128    	; 0xb6 <__bad_interrupt>
  36:	00 00       	nop
  38:	3e c0       	rjmp	.+124    	; 0xb6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	3c c0       	rjmp	.+120    	; 0xb6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	3a c0       	rjmp	.+116    	; 0xb6 <__bad_interrupt>
  42:	00 00       	nop
  44:	38 c0       	rjmp	.+112    	; 0xb6 <__bad_interrupt>
  46:	00 00       	nop
  48:	36 c0       	rjmp	.+108    	; 0xb6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	34 c0       	rjmp	.+104    	; 0xb6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	32 c0       	rjmp	.+100    	; 0xb6 <__bad_interrupt>
  52:	00 00       	nop
  54:	30 c0       	rjmp	.+96     	; 0xb6 <__bad_interrupt>
  56:	00 00       	nop
  58:	2e c0       	rjmp	.+92     	; 0xb6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	2c c0       	rjmp	.+88     	; 0xb6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	2a c0       	rjmp	.+84     	; 0xb6 <__bad_interrupt>
  62:	00 00       	nop
  64:	28 c0       	rjmp	.+80     	; 0xb6 <__bad_interrupt>
  66:	00 00       	nop
  68:	26 c0       	rjmp	.+76     	; 0xb6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	24 c0       	rjmp	.+72     	; 0xb6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	22 c0       	rjmp	.+68     	; 0xb6 <__bad_interrupt>
  72:	00 00       	nop
  74:	20 c0       	rjmp	.+64     	; 0xb6 <__bad_interrupt>
  76:	00 00       	nop
  78:	1e c0       	rjmp	.+60     	; 0xb6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	1c c0       	rjmp	.+56     	; 0xb6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	1a c0       	rjmp	.+52     	; 0xb6 <__bad_interrupt>
  82:	00 00       	nop
  84:	18 c0       	rjmp	.+48     	; 0xb6 <__bad_interrupt>
  86:	00 00       	nop
  88:	16 c0       	rjmp	.+44     	; 0xb6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e8       	ldi	r30, 0x82	; 130
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 31       	cpi	r26, 0x1C	; 28
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>
  b2:	5b d0       	rcall	.+182    	; 0x16a <main>
  b4:	64 c0       	rjmp	.+200    	; 0x17e <_exit>

000000b6 <__bad_interrupt>:
  b6:	a4 cf       	rjmp	.-184    	; 0x0 <__vectors>

000000b8 <LCD_pulse_enable>:

	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;

	LCD_write_command(command);					// 커서 이동
  b8:	da 9a       	sbi	0x1b, 2	; 27
  ba:	8f e9       	ldi	r24, 0x9F	; 159
  bc:	9f e0       	ldi	r25, 0x0F	; 15
  be:	01 97       	sbiw	r24, 0x01	; 1
  c0:	f1 f7       	brne	.-4      	; 0xbe <LCD_pulse_enable+0x6>
  c2:	00 c0       	rjmp	.+0      	; 0xc4 <LCD_pulse_enable+0xc>
  c4:	00 00       	nop
  c6:	da 98       	cbi	0x1b, 2	; 27
  c8:	8f e9       	ldi	r24, 0x9F	; 159
  ca:	9f e0       	ldi	r25, 0x0F	; 15
  cc:	01 97       	sbiw	r24, 0x01	; 1
  ce:	f1 f7       	brne	.-4      	; 0xcc <LCD_pulse_enable+0x14>
  d0:	00 c0       	rjmp	.+0      	; 0xd2 <LCD_pulse_enable+0x1a>
  d2:	00 00       	nop
  d4:	08 95       	ret

000000d6 <LCD_write_data>:
  d6:	d8 9a       	sbi	0x1b, 0	; 27
  d8:	85 bb       	out	0x15, r24	; 21
  da:	ee df       	rcall	.-36     	; 0xb8 <LCD_pulse_enable>
  dc:	8f e3       	ldi	r24, 0x3F	; 63
  de:	9f e1       	ldi	r25, 0x1F	; 31
  e0:	01 97       	sbiw	r24, 0x01	; 1
  e2:	f1 f7       	brne	.-4      	; 0xe0 <LCD_write_data+0xa>
  e4:	00 c0       	rjmp	.+0      	; 0xe6 <LCD_write_data+0x10>
  e6:	00 00       	nop
  e8:	08 95       	ret

000000ea <LCD_write_command>:
  ea:	d8 98       	cbi	0x1b, 0	; 27
  ec:	85 bb       	out	0x15, r24	; 21
  ee:	e4 df       	rcall	.-56     	; 0xb8 <LCD_pulse_enable>
  f0:	8f e3       	ldi	r24, 0x3F	; 63
  f2:	9f e1       	ldi	r25, 0x1F	; 31
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_write_command+0xa>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_write_command+0x10>
  fa:	00 00       	nop
  fc:	08 95       	ret

000000fe <LCD_clear>:
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	f4 df       	rcall	.-24     	; 0xea <LCD_write_command>
 102:	8f e3       	ldi	r24, 0x3F	; 63
 104:	9f e1       	ldi	r25, 0x1F	; 31
 106:	01 97       	sbiw	r24, 0x01	; 1
 108:	f1 f7       	brne	.-4      	; 0x106 <LCD_clear+0x8>
 10a:	00 c0       	rjmp	.+0      	; 0x10c <LCD_clear+0xe>
 10c:	00 00       	nop
 10e:	08 95       	ret

00000110 <LCD_init>:
 110:	2f ef       	ldi	r18, 0xFF	; 255
 112:	80 e7       	ldi	r24, 0x70	; 112
 114:	92 e0       	ldi	r25, 0x02	; 2
 116:	21 50       	subi	r18, 0x01	; 1
 118:	80 40       	sbci	r24, 0x00	; 0
 11a:	90 40       	sbci	r25, 0x00	; 0
 11c:	e1 f7       	brne	.-8      	; 0x116 <LCD_init+0x6>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <LCD_init+0x10>
 120:	00 00       	nop
 122:	8f ef       	ldi	r24, 0xFF	; 255
 124:	84 bb       	out	0x14, r24	; 20
 126:	15 ba       	out	0x15, r1	; 21
 128:	8a b3       	in	r24, 0x1a	; 26
 12a:	87 60       	ori	r24, 0x07	; 7
 12c:	8a bb       	out	0x1a, r24	; 26
 12e:	d9 98       	cbi	0x1b, 1	; 27
 130:	88 e3       	ldi	r24, 0x38	; 56
 132:	db df       	rcall	.-74     	; 0xea <LCD_write_command>
 134:	8c e0       	ldi	r24, 0x0C	; 12
 136:	d9 df       	rcall	.-78     	; 0xea <LCD_write_command>
 138:	e2 df       	rcall	.-60     	; 0xfe <LCD_clear>
 13a:	86 e0       	ldi	r24, 0x06	; 6
 13c:	d6 cf       	rjmp	.-84     	; 0xea <LCD_write_command>
 13e:	08 95       	ret

00000140 <LCD_write_string>:
 140:	0f 93       	push	r16
 142:	1f 93       	push	r17
 144:	cf 93       	push	r28
 146:	fc 01       	movw	r30, r24
 148:	80 81       	ld	r24, Z
 14a:	88 23       	and	r24, r24
 14c:	51 f0       	breq	.+20     	; 0x162 <LCD_write_string+0x22>
 14e:	8f 01       	movw	r16, r30
 150:	c0 e0       	ldi	r28, 0x00	; 0
 152:	c1 df       	rcall	.-126    	; 0xd6 <LCD_write_data>
 154:	cf 5f       	subi	r28, 0xFF	; 255
 156:	f8 01       	movw	r30, r16
 158:	ec 0f       	add	r30, r28
 15a:	f1 1d       	adc	r31, r1
 15c:	80 81       	ld	r24, Z
 15e:	81 11       	cpse	r24, r1
 160:	f8 cf       	rjmp	.-16     	; 0x152 <LCD_write_string+0x12>
 162:	cf 91       	pop	r28
 164:	1f 91       	pop	r17
 166:	0f 91       	pop	r16
 168:	08 95       	ret

0000016a <main>:
}

int main(void)
{
	LCD_init();									// 텍스트 LCD 초기화
 16a:	d2 df       	rcall	.-92     	; 0x110 <LCD_init>
	LCD_write_string("Hello World!");			// 문자열 출력
 16c:	80 e0       	ldi	r24, 0x00	; 0
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	e7 df       	rcall	.-50     	; 0x140 <LCD_write_string>

	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;

	LCD_write_command(command);					// 커서 이동
 172:	80 ec       	ldi	r24, 0xC0	; 192
 174:	ba df       	rcall	.-140    	; 0xea <LCD_write_command>
int main(void)
{
	LCD_init();									// 텍스트 LCD 초기화
	LCD_write_string("Hello World!");			// 문자열 출력
	LCD_goto_XY(1, 0);
	LCD_write_string("REMOTE CONTROL");			// 문자열 출력
 176:	8d e0       	ldi	r24, 0x0D	; 13
 178:	91 e0       	ldi	r25, 0x01	; 1
 17a:	e2 df       	rcall	.-60     	; 0x140 <LCD_write_string>
 17c:	ff cf       	rjmp	.-2      	; 0x17c <main+0x12>

0000017e <_exit>:
 17e:	f8 94       	cli

00000180 <__stop_program>:
 180:	ff cf       	rjmp	.-2      	; 0x180 <__stop_program>
