
1227_BluetoothControl.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000001b4  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a8  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fd1  00000000  00000000  00000380  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a82  00000000  00000000  00001351  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000057b  00000000  00000000  00001dd3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00002350  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000504  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004ed  00000000  00000000  00002968  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002e55  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e4 eb       	ldi	r30, 0xB4	; 180
  a0:	f1 e0       	ldi	r31, 0x01	; 1
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a0 35       	cpi	r26, 0x50	; 80
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a0 e5       	ldi	r26, 0x50	; 80
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a0 35       	cpi	r26, 0x50	; 80
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	70 d0       	rcall	.+224    	; 0x1a4 <main>
  c4:	75 c0       	rjmp	.+234    	; 0x1b0 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <LCD_pulse_enable>:
#define COMMNAD_CURSOR_ON_OFF_BIT	1
#define COMMAND_BLINK_ON_OFF_BIT	0

void LCD_pulse_enable(void)						// 하강 에지에서 동작
{
	PORT_CONTROL |= (1 << E_PIN);				// E를 HIGH로
  c8:	da 9a       	sbi	0x1b, 2	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	8f e9       	ldi	r24, 0x9F	; 159
  cc:	9f e0       	ldi	r25, 0x0F	; 15
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <LCD_pulse_enable+0x6>
  d2:	00 c0       	rjmp	.+0      	; 0xd4 <LCD_pulse_enable+0xc>
  d4:	00 00       	nop
	_delay_ms(1);
	PORT_CONTROL &= ~(1 << E_PIN);				// E를 LOW로
  d6:	da 98       	cbi	0x1b, 2	; 27
  d8:	8f e9       	ldi	r24, 0x9F	; 159
  da:	9f e0       	ldi	r25, 0x0F	; 15
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <LCD_pulse_enable+0x14>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <LCD_pulse_enable+0x1a>
  e2:	00 00       	nop
  e4:	08 95       	ret

000000e6 <LCD_write_data>:
	_delay_ms(1);
}

void LCD_write_data(uint8_t data)
{
	PORT_CONTROL |= (1 << RS_PIN);				// 문자 출력에서는 RS는 1
  e6:	d8 9a       	sbi	0x1b, 0	; 27
	PORT_DATA = data;							// 출력할 문자 데이터
  e8:	85 bb       	out	0x15, r24	; 21
	LCD_pulse_enable();							// 문자 출력
  ea:	ee df       	rcall	.-36     	; 0xc8 <LCD_pulse_enable>
  ec:	8f e3       	ldi	r24, 0x3F	; 63
  ee:	9f e1       	ldi	r25, 0x1F	; 31
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_write_data+0xa>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_write_data+0x10>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <LCD_write_command>:
	_delay_ms(2);
}

void LCD_write_command(uint8_t command)
{
	PORT_CONTROL &= ~(1 << RS_PIN);				// 명령어 실행에서는 RS는 0
  fa:	d8 98       	cbi	0x1b, 0	; 27
	PORT_DATA = command;						// 데이터 핀에 명령어 전달
  fc:	85 bb       	out	0x15, r24	; 21
	LCD_pulse_enable();							// 명령어 실행
  fe:	e4 df       	rcall	.-56     	; 0xc8 <LCD_pulse_enable>
 100:	8f e3       	ldi	r24, 0x3F	; 63
 102:	9f e1       	ldi	r25, 0x1F	; 31
 104:	01 97       	sbiw	r24, 0x01	; 1
 106:	f1 f7       	brne	.-4      	; 0x104 <LCD_write_command+0xa>
 108:	00 c0       	rjmp	.+0      	; 0x10a <LCD_write_command+0x10>
 10a:	00 00       	nop
 10c:	08 95       	ret

0000010e <LCD_clear>:
	_delay_ms(2);
}

void LCD_clear(void)
{
	LCD_write_command(COMMAND_CLEAR_DISPLAY);
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	f4 df       	rcall	.-24     	; 0xfa <LCD_write_command>
 112:	8f e3       	ldi	r24, 0x3F	; 63
 114:	9f e1       	ldi	r25, 0x1F	; 31
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <LCD_clear+0x8>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <LCD_clear+0xe>
 11c:	00 00       	nop
 11e:	08 95       	ret

00000120 <LCD_init>:
 120:	2f ef       	ldi	r18, 0xFF	; 255
 122:	80 e7       	ldi	r24, 0x70	; 112
 124:	92 e0       	ldi	r25, 0x02	; 2
 126:	21 50       	subi	r18, 0x01	; 1
 128:	80 40       	sbci	r24, 0x00	; 0
 12a:	90 40       	sbci	r25, 0x00	; 0
 12c:	e1 f7       	brne	.-8      	; 0x126 <LCD_init+0x6>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <LCD_init+0x10>
 130:	00 00       	nop
void LCD_init(void)
{
	_delay_ms(50);								// 초기 구동 시간

	// 연결 핀을 출력으로 설정
	DDR_DATA = 0xFF;
 132:	8f ef       	ldi	r24, 0xFF	; 255
 134:	84 bb       	out	0x14, r24	; 20
	PORT_DATA = 0x00;
 136:	15 ba       	out	0x15, r1	; 21
	DDR_CONTROL |= (1 << RS_PIN) | (1 << RW_PIN) | (1 << E_PIN);
 138:	8a b3       	in	r24, 0x1a	; 26
 13a:	87 60       	ori	r24, 0x07	; 7
 13c:	8a bb       	out	0x1a, r24	; 26

	// R/W 핀으로 LOW를 출력하여 쓰기 전용으로 사용
	PORT_CONTROL &= ~(1 << RW_PIN);
 13e:	d9 98       	cbi	0x1b, 1	; 27

	LCD_write_command(COMMAND_8_BIT_MODE);		// 8비트 모드로 셋팅
 140:	88 e3       	ldi	r24, 0x38	; 56
 142:	db df       	rcall	.-74     	; 0xfa <LCD_write_command>

	// 디스플레이 온 오프 컨트롤
	// 화면 온, 커서 오프, 커서 깜빡임 오프
	uint8_t command = 0x08 | (1 << COMMAND_DISPLAY_ON_OFF_BIT);
	LCD_write_command(command);
 144:	8c e0       	ldi	r24, 0x0C	; 12

	LCD_clear();								// 화면 지움
 146:	d9 df       	rcall	.-78     	; 0xfa <LCD_write_command>

	// 엔트리 모드 셋업
	// 출력 후 커서를 오른쪽으로 옮김. 즉 DDRAM의 주소가 증가하면 화면 이동은 없음
	LCD_write_command(0x06);
 148:	e2 df       	rcall	.-60     	; 0x10e <LCD_clear>
 14a:	86 e0       	ldi	r24, 0x06	; 6
 14c:	d6 cf       	rjmp	.-84     	; 0xfa <LCD_write_command>
 14e:	08 95       	ret

00000150 <LCD_write_string>:
}

void LCD_write_string(char *string)
{
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	fc 01       	movw	r30, r24
	uint8_t i;
	for(i = 0; string[i]; i++)					// 종료 문자를 만날때까지
 158:	80 81       	ld	r24, Z
 15a:	88 23       	and	r24, r24
 15c:	51 f0       	breq	.+20     	; 0x172 <LCD_write_string+0x22>
 15e:	8f 01       	movw	r16, r30
 160:	c0 e0       	ldi	r28, 0x00	; 0
		LCD_write_data(string[i]);				// 문자 단위 출력
 162:	c1 df       	rcall	.-126    	; 0xe6 <LCD_write_data>
}

void LCD_write_string(char *string)
{
	uint8_t i;
	for(i = 0; string[i]; i++)					// 종료 문자를 만날때까지
 164:	cf 5f       	subi	r28, 0xFF	; 255
 166:	f8 01       	movw	r30, r16
 168:	ec 0f       	add	r30, r28
 16a:	f1 1d       	adc	r31, r1
 16c:	80 81       	ld	r24, Z
 16e:	81 11       	cpse	r24, r1
 170:	f8 cf       	rjmp	.-16     	; 0x162 <LCD_write_string+0x12>
		LCD_write_data(string[i]);				// 문자 단위 출력
}
 172:	cf 91       	pop	r28
 174:	1f 91       	pop	r17
 176:	0f 91       	pop	r16
 178:	08 95       	ret

0000017a <LCD_goto_XY>:

	// 첫째 라인 시작 주소는 0x00, 둘째 라인 시작 주소는 0x40
	uint8_t address = (0x40 * row) + col;
	uint8_t command = 0x80 + address;

	LCD_write_command(command);					// 커서 이동
 17a:	81 70       	andi	r24, 0x01	; 1
 17c:	6f 70       	andi	r22, 0x0F	; 15
 17e:	90 e4       	ldi	r25, 0x40	; 64
 180:	89 9f       	mul	r24, r25
 182:	60 0d       	add	r22, r0
 184:	11 24       	eor	r1, r1
 186:	86 2f       	mov	r24, r22
 188:	80 58       	subi	r24, 0x80	; 128
 18a:	b7 cf       	rjmp	.-146    	; 0xfa <LCD_write_command>
 18c:	08 95       	ret

0000018e <LCD_TurnOn>:
	stdin = &INPUT;
}

void LCD_TurnOn()
{
	LCD_init();									// 텍스트 LCD 초기화
 18e:	c8 df       	rcall	.-112    	; 0x120 <LCD_init>
	LCD_write_string("REMOTE CONTROL!");		// 문자열 출력
 190:	80 e0       	ldi	r24, 0x00	; 0
 192:	91 e0       	ldi	r25, 0x01	; 1
 194:	dd df       	rcall	.-70     	; 0x150 <LCD_write_string>
	LCD_goto_XY(1, 0);
 196:	60 e0       	ldi	r22, 0x00	; 0
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	ef df       	rcall	.-34     	; 0x17a <LCD_goto_XY>
	LCD_write_string("READY...");				// 문자열 출력
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	91 e0       	ldi	r25, 0x01	; 1
 1a0:	d7 cf       	rjmp	.-82     	; 0x150 <LCD_write_string>
 1a2:	08 95       	ret

000001a4 <main>:
 1a4:	f4 df       	rcall	.-24     	; 0x18e <LCD_TurnOn>

	LCD_TurnOn();								// LCD 출력
#if 0
	UART_START();								// UART 통신 준비 (UART0: PUTTY, UART1: 블루투스)
#endif 
	DDRD = 0xFF;								// D포트 LED 출력준비
 1a6:	8f ef       	ldi	r24, 0xFF	; 255
 1a8:	81 bb       	out	0x11, r24	; 17
	PORTD = 0x20;								// 출력 LED 초기화
 1aa:	80 e2       	ldi	r24, 0x20	; 32
 1ac:	82 bb       	out	0x12, r24	; 18
 1ae:	ff cf       	rjmp	.-2      	; 0x1ae <main+0xa>

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
