
0104_SevenSegment.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001fc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000090c  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000082d  00000000  00000000  00000b70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031c  00000000  00000000  0000139d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  000016bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000459  00000000  00000000  00001700  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000010b  00000000  00000000  00001b59  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001c64  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	11 d0       	rcall	.+34     	; 0xbc <main>
  9a:	6c c0       	rjmp	.+216    	; 0x174 <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <get_button_state>:
#include <avr/io.h>
#include <util/delay.h>

int get_button_state(void)
{
	if ((PINA & 0x01) >> 0 == 1)
  9e:	c8 9b       	sbis	0x19, 0	; 25
  a0:	0a c0       	rjmp	.+20     	; 0xb6 <get_button_state+0x18>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a2:	8f e3       	ldi	r24, 0x3F	; 63
  a4:	9c e9       	ldi	r25, 0x9C	; 156
  a6:	01 97       	sbiw	r24, 0x01	; 1
  a8:	f1 f7       	brne	.-4      	; 0xa6 <get_button_state+0x8>
  aa:	00 c0       	rjmp	.+0      	; 0xac <get_button_state+0xe>
  ac:	00 00       	nop
	{
		_delay_ms(10);
		if ((PINA & 0x01) >> 0 == 1)
  ae:	89 b3       	in	r24, 0x19	; 25
			return 1;
  b0:	81 70       	andi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	08 95       	ret
	}

	return 0;
  b6:	80 e0       	ldi	r24, 0x00	; 0
  b8:	90 e0       	ldi	r25, 0x00	; 0
}
  ba:	08 95       	ret

000000bc <main>:

int main(void)
{
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	00 d0       	rcall	.+0      	; 0xc2 <main+0x6>
  c2:	1f 92       	push	r1
  c4:	cd b7       	in	r28, 0x3d	; 61
  c6:	de b7       	in	r29, 0x3e	; 62
	uint8_t number[] = {0x88, 0xEB, 0x4C};
  c8:	88 e8       	ldi	r24, 0x88	; 136
  ca:	89 83       	std	Y+1, r24	; 0x01
  cc:	8b ee       	ldi	r24, 0xEB	; 235
  ce:	8a 83       	std	Y+2, r24	; 0x02
  d0:	8c e4       	ldi	r24, 0x4C	; 76
  d2:	8b 83       	std	Y+3, r24	; 0x03
	int count = 0;
	DDRD = 0xFF;				//D포트를 출력포트로 설정
  d4:	9f ef       	ldi	r25, 0xFF	; 255
  d6:	91 bb       	out	0x11, r25	; 17
	DDRA &= ~0x01;				//A포트(PF01만)를 입력포트로 설정
  d8:	d0 98       	cbi	0x1a, 0	; 26
	DDRC = 0xFF;				//C포트를 출력포트로 설정
  da:	94 bb       	out	0x14, r25	; 20

	PORTD = 0x4C;
  dc:	82 bb       	out	0x12, r24	; 18
	PORTC = 0x01;
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	85 bb       	out	0x15, r24	; 21

	char state_previous = 0, state_current;
  e2:	f1 2c       	mov	r15, r1
}

int main(void)
{
	uint8_t number[] = {0x88, 0xEB, 0x4C};
	int count = 0;
  e4:	00 e0       	ldi	r16, 0x00	; 0
  e6:	10 e0       	ldi	r17, 0x00	; 0
    while (1) 
    {
		state_current = get_button_state();
		if (state_current == 1 && state_previous == 0)
		{
			PORTC = 0x01;
  e8:	ee 24       	eor	r14, r14
  ea:	e3 94       	inc	r14
			count = ++count % 3;
  ec:	0f 2e       	mov	r0, r31
  ee:	f3 e0       	ldi	r31, 0x03	; 3
  f0:	cf 2e       	mov	r12, r31
  f2:	d1 2c       	mov	r13, r1
  f4:	f0 2d       	mov	r31, r0
	char state_previous = 0, state_current;

    /* Replace with your application code */
    while (1) 
    {
		state_current = get_button_state();
  f6:	d3 df       	rcall	.-90     	; 0x9e <get_button_state>
  f8:	28 2f       	mov	r18, r24
		if (state_current == 1 && state_previous == 0)
  fa:	81 30       	cpi	r24, 0x01	; 1
  fc:	49 f4       	brne	.+18     	; 0x110 <main+0x54>
  fe:	f1 10       	cpse	r15, r1
 100:	07 c0       	rjmp	.+14     	; 0x110 <main+0x54>
		{
			PORTC = 0x01;
 102:	e5 ba       	out	0x15, r14	; 21
			count = ++count % 3;
 104:	c8 01       	movw	r24, r16
 106:	01 96       	adiw	r24, 0x01	; 1
 108:	b6 01       	movw	r22, r12
 10a:	0d d0       	rcall	.+26     	; 0x126 <__divmodhi4>
 10c:	8c 01       	movw	r16, r24
 10e:	01 c0       	rjmp	.+2      	; 0x112 <main+0x56>
		}
		else
		{
			PORTC = 0x00;
 110:	15 ba       	out	0x15, r1	; 21
		}

		PORTD = number[count];
 112:	e1 e0       	ldi	r30, 0x01	; 1
 114:	f0 e0       	ldi	r31, 0x00	; 0
 116:	ec 0f       	add	r30, r28
 118:	fd 1f       	adc	r31, r29
 11a:	e0 0f       	add	r30, r16
 11c:	f1 1f       	adc	r31, r17
 11e:	90 81       	ld	r25, Z
 120:	92 bb       	out	0x12, r25	; 18
		state_previous = state_current;
 122:	f2 2e       	mov	r15, r18
    }
 124:	e8 cf       	rjmp	.-48     	; 0xf6 <main+0x3a>

00000126 <__divmodhi4>:
 126:	97 fb       	bst	r25, 7
 128:	07 2e       	mov	r0, r23
 12a:	16 f4       	brtc	.+4      	; 0x130 <__divmodhi4+0xa>
 12c:	00 94       	com	r0
 12e:	06 d0       	rcall	.+12     	; 0x13c <__divmodhi4_neg1>
 130:	77 fd       	sbrc	r23, 7
 132:	08 d0       	rcall	.+16     	; 0x144 <__divmodhi4_neg2>
 134:	0b d0       	rcall	.+22     	; 0x14c <__udivmodhi4>
 136:	07 fc       	sbrc	r0, 7
 138:	05 d0       	rcall	.+10     	; 0x144 <__divmodhi4_neg2>
 13a:	3e f4       	brtc	.+14     	; 0x14a <__divmodhi4_exit>

0000013c <__divmodhi4_neg1>:
 13c:	90 95       	com	r25
 13e:	81 95       	neg	r24
 140:	9f 4f       	sbci	r25, 0xFF	; 255
 142:	08 95       	ret

00000144 <__divmodhi4_neg2>:
 144:	70 95       	com	r23
 146:	61 95       	neg	r22
 148:	7f 4f       	sbci	r23, 0xFF	; 255

0000014a <__divmodhi4_exit>:
 14a:	08 95       	ret

0000014c <__udivmodhi4>:
 14c:	aa 1b       	sub	r26, r26
 14e:	bb 1b       	sub	r27, r27
 150:	51 e1       	ldi	r21, 0x11	; 17
 152:	07 c0       	rjmp	.+14     	; 0x162 <__udivmodhi4_ep>

00000154 <__udivmodhi4_loop>:
 154:	aa 1f       	adc	r26, r26
 156:	bb 1f       	adc	r27, r27
 158:	a6 17       	cp	r26, r22
 15a:	b7 07       	cpc	r27, r23
 15c:	10 f0       	brcs	.+4      	; 0x162 <__udivmodhi4_ep>
 15e:	a6 1b       	sub	r26, r22
 160:	b7 0b       	sbc	r27, r23

00000162 <__udivmodhi4_ep>:
 162:	88 1f       	adc	r24, r24
 164:	99 1f       	adc	r25, r25
 166:	5a 95       	dec	r21
 168:	a9 f7       	brne	.-22     	; 0x154 <__udivmodhi4_loop>
 16a:	80 95       	com	r24
 16c:	90 95       	com	r25
 16e:	bc 01       	movw	r22, r24
 170:	cd 01       	movw	r24, r26
 172:	08 95       	ret

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
